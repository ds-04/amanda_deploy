---

- block:

  # ***DISCOVER LOGIC***

  # users
   - name: Get all users from passwd db
     ansible.builtin.getent:
      database: passwd
      split: ':'

   # debian user naming
   - name: "set_fact for {{ debian_user }} - amanda user"
     ansible.builtin.set_fact:
      server_user1: "{{ item }}"
     loop:
      - "{{ debian_user }}"
     when: debian_user in ansible_facts.getent_passwd

   # redhat user naming
   - name: "set_fact for {{ redhat_user }} - amanda user"
     ansible.builtin.set_fact:
      server_user2: "{{ item }}"
     loop:
      - "{{ redhat_user }}"
     when: redhat_user in ansible_facts.getent_passwd

   # suse user naming
   - name: "set_fact for {{ suse_user }} - amanda user"
     ansible.builtin.set_fact:
      server_user3: "{{ item }}"
     loop:
      - "{{ suse_user }}"
     when: suse_user in ansible_facts.getent_passwd

   # detect redhat naming - most common username
   - name: "set_fact for FINAL {{ redhat_user }} user"
     ansible.builtin.set_fact:
      server_user_discovered: "{{ redhat_user }}"
     when:
      - server_user2 is defined
      - server_user1 is not defined
      - server_user3 is not defined

   # ...if not, then we expect Debian user?
   - name: "set_fact for FINAL {{ debian_user }} user"
     ansible.builtin.set_fact:
      server_user_discovered: "{{ debian_user }}"
     when:
      - server_user1 is defined
      - server_user2 is not defined
      - server_user3 is not defined

   # ...if not, then we expect Suse user?
   - name: "set_fact for FINAL {{ suse_user }} user"
     ansible.builtin.set_fact:
      server_user_discovered: "{{ suse_user }}"
     when:
      - server_user3 is defined
      - server_user1 is not defined
      - server_user2 is not defined

   # if both the debian named and redhat named exist
   # this could be a zmanda install on a system
   # where the other users exists (which is valid)
   - name: "set_fact for FINAL {{ redhat_user }} user"
     ansible.builtin.set_fact:
      server_user_discovered: "{{ redhat_user }}"
     when:
      - use_zmanda_package | bool
      - server_user1 is defined
      - server_user2 is defined
      - server_user3 is not defined

   # and if none are found its a fail
   - name: "FAIL to find a valid amanda user"
     ansible.builtin.fail:
      msg: "FAILED to find a valid amanda user"
     when:
      - server_user1 is not defined
      - server_user2 is not defined
      - server_user3 is not defined

   # set var for vagrant user
   - name: "set_fact for vagrant user"
     ansible.builtin.set_fact:
      server_user_vagrant: 'vagrant'

   # if the user vagrant present, set global var
   - name: "set_fact vagrant_hostname true - for vagrant instances"
     ansible.builtin.set_fact:
      vagrant_hostname: true
     when:
      - server_user_vagrant is defined

   - name: "Get {{ server_user_discovered }} user info"
     ansible.builtin.getent:
      database: passwd
      key: "{{ server_user_discovered }}"

   - name: "set_fact for user_attributes"
     ansible.builtin.set_fact:
      user_attributes: "{{ item.value }}"
     loop: "{{ ansible_facts.getent_passwd | dict2items }}"

   - name: "set_fact server_user_discovered_home"
     ansible.builtin.set_fact:
      server_user_discovered_home: "{{ item }}"
     loop:
      - "{{ debian_user_home }}"
      - "{{ redhat_user_home }}"
     when: item in user_attributes

   - name: "Shell find primary group of {{ server_user_discovered }}"
     ansible.builtin.shell:
      cmd: "id -gn {{ server_user_discovered }}"
     register: id_group

   - name: "set_fact for primary group"
     ansible.builtin.set_fact:
      server_user_discovered_group: "{{ id_group.stdout }}"

  become: true
...
