---

# D Simpson 2021,2023 ds-04

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

- name: BLOCK for amrecover_fix.yml
  block:

   - name: TASK include roles/amanda_server/defaults
     ansible.builtin.include_vars:
      file: roles/amanda_server/defaults/main.yml
      name: amanda_include_vars

   - name: TASK Gather installed package facts
     ansible.builtin.package_facts:
      manager: auto

   - name: TASK set_fact no_serverpkg TRUE - if we don't find amanda-server package
     ansible.builtin.set_fact:
      no_serverpkg: 'true'
     when: "'amanda-server' not in ansible_facts.packages"

   - name: TASK set_fact for ambind_search_paths
     ansible.builtin.set_fact:
      local_ambind_search_paths: "{{ amanda_include_vars.ambind_search_paths }}"
     when:
      - no_serverpkg is defined
      - no_serverpkg | bool

   - name: TASK Find ambind binary (from known supplied paths) using stat
     ansible.builtin.stat:
      path: "{{ item }}"
     register: findres
     loop: "{{ local_ambind_search_paths }}"
     when:
      - no_serverpkg is defined
      - no_serverpkg | bool

   - name: TASK Create var ambind_result for location of ambind if found
     ansible.builtin.set_fact:
      ambind_result: "{{ item }}"
     loop: "{{ findres.results | selectattr('stat.exists') | map(attribute='item') | list }}"

   - name: TASK Install amanda-server to fix missing ambind
     ansible.builtin.dnf:
      name: 'amanda-server'
     when:
      - ambind_result | default('', true) | trim != ''
      - ansible_os_family == "RedHat"
      - server_pkg_needed is defined
      - server_pkg_needed | bool

   - name: TASK Debian family - install amanda-server to fix missing ambind
     ansible.builtin.apt:
      name: 'amanda-server'
     when:
      - ambind_result | default('', true) | trim != ''
      - ansible_os_family == "Debian"
      - server_pkg_needed is defined
      - server_pkg_needed | bool

   # we now have the package
   - name: TASK Gather installed package facts - we now expect amanda-server
     ansible.builtin.package_facts:
      manager: auto

   # set var accordingly
   - name: TASK set_fact no_serverpkg FALSE - confirming amanda-server installed
     ansible.builtin.set_fact:
      no_serverpkg: 'false'
     when: "'amanda-server' in ansible_facts.packages"

   - name: TASK stat /etc/amanda/DailySet1 - we don't want this default server config on a client
     ansible.builtin.stat:
      path: /etc/amanda/DailySet1
     register: found_default_svr_cfg
     when:
      - no_serverpkg is defined
      - not no_serverpkg | bool

   - name: TASK Delete /etc/amanda/DailySet1 config (which came from the server package, due to ambind fix)
     ansible.builtin.file:
      path: /etc/amanda/DailySet1
      state: absent
     when:
      - no_serverpkg is defined
      - not no_serverpkg | bool
      - found_default_svr_cfg is defined
      - found_default_svr_cfg.stat.exists | bool

   - name: TASK Delete /etc/amanda/DailySet1 config on clients not servers (if always_remove_client_DailySet1)
     ansible.builtin.file:
      path: /etc/amanda/DailySet1
      state: absent
     when:
      - always_remove_client_DailySet1 | bool
      - '"amanda_server" not in group_names'

   - name: TASK Make sure aliases in .bash_profile to remind of ambind fix (and to block amdump/amcheck usage on a client)
     ansible.builtin.lineinfile:
      path: "{{ server_user_discovered_home }}/.bash_profile"
      line: "{{ item.value }}"
      regex: "^{{ item.key }}"
      state: present
      create: 'true'
      backup: 'true'
      owner: "{{ server_user_discovered }}"
      group: "{{ server_user_discovered_group }}"
      mode: '0600'
     loop: "{{ lookup('dict', ambind_bash_profile_dict) }}"
     when:
      - no_serverpkg is defined
      - not no_serverpkg | bool

  become: "True"
...
