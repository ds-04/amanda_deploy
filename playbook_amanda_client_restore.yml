---

# D Simpson 2021,2023 ds-04

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

- hosts: amanda_server, amanda_client
  roles:
    - { role: amanda_discover_env }

# We import defaults from the server role
- hosts: amanda_server, amanda_client_restore
  name: 'PLAY amanda_client_restore import vars'
  gather_facts: false
  tasks:
   - name: 'TASK include amanda_server role defaults'
     ansible.builtin.include_vars:
      file: roles/amanda_server/defaults/main.yml
      name: amanda_include_vars

- hosts: amanda_server
  name: 'PLAY amanda_client_restore server find amandad binary'
  tasks:
   - name: 'TASK Set fact for amanda_server known_hosts_key_type, std_ssh_key_opts, amandad_search_paths #only needed for server as connection to server'
     ansible.builtin.set_fact:
      local_known_hosts_key_type: "{{ amanda_include_vars.known_hosts_key_type }}" # these settings are not OS dependent, for clarity made local here
      local_amandad_search_paths: "{{ amanda_include_vars.amandad_search_paths }}"

   - name: 'TASK Find amandad binary (from known supplied paths)'
     ansible.builtin.stat:
      path: "{{ item }}"
     register: findres
     loop: "{{ local_amandad_search_paths }}" # comes from above

   - name: 'TASK Assign the dicovered amandad_path var'
     ansible.builtin.set_fact:
      amandad_path: "{{ item.item }}"
     loop: "{{ findres.results }}"
     when: item.stat.exists

# kept for debug
# - name: TASK show results
#   ansible.builtin.debug:
#     msg: "{{ amandad_path }}"

# Assigned in this way for clarity more than anything else... (rather than direct)
- hosts: amanda_client_restore
  name: 'PLAY amanda_client_restore client restore hosts, ssh setup i'
  tasks:
   - name: 'TASK assign various server vars from defaults for client restore'
     ansible.builtin.set_fact:
      local_server_ip: "{{ ansible_default_ipv4.address }}"
      local_update_server_known_hosts: "{{ amanda_include_vars.update_client_restore_known_hosts }}"
      local_client_restore_ssh_keypair: "{{ amanda_include_vars.client_restore_ssh_keypair }}"
      local_ssh_key_algo: "{{ amanda_include_vars.ssh_key_algo }}"
      local_std_ssh_key_opts: "{{ amanda_include_vars.std_ssh_key_opts }}" # this is a global, but attach it amanda_client_restore

# If vagrant test setup override
   - name: 'TASK Vagrant - override the local_server_ip for amanda_server'
     ansible.builtin.set_fact:
      local_server_ip: "{{ ansible_all_ipv4_addresses | regex_search('192.168.[0-9]*.[0-9]*') | default(ansible_default_ipv4.address) }}"
     when: vagrant_hostname is defined and vagrant_hostname | bool

   - name: 'TASK Create /root/.ssh on client restore system'
     ansible.builtin.file:
      state: directory
      owner: root
      group: root
      mode: '0700'
      path: "/root/.ssh"
     become: true

   - name: 'TASK Generate ssh keys on client system "{{ local_client_restore_ssh_keypair }}"'
     community.crypto.openssh_keypair:
      force: 'False'
      type: "{{ local_ssh_key_algo }}"
      owner: root
      group: root
      path: "/root/.ssh/{{ local_client_restore_ssh_keypair }}"
     become: true

# Get the client's public key
- hosts: amanda_client_restore
  name: 'PLAY amanda_client_restore client restore hosts, ssh setup ii'
  gather_facts: false
  tasks:
   - name: 'TASK Get ssh keys on client restore systems'
     ansible.builtin.slurp:
      src: "/root/.ssh/{{ local_client_restore_ssh_keypair }}.pub"
     register: amanda_client_restore_pub
     become: true

# kept for debug
- hosts: TASK amanda_client_restore
  tasks:
   - name: debug
     ansible.builtin.debug:
       msg: "{{ local_std_ssh_key_opts }}"

# Delegate and apply amanda_client_restore public key to the server
- hosts: amanda_client_restore
  name: 'PLAY amanda_client_restore client restore hosts, ssh setup iii'
  gather_facts: false
  tasks:
   - name: 'TASK add client public key to the server from client restore systems'
     ansible.builtin.authorized_key:
      user: "{{ hostvars[item]['server_user_discovered'] }}"
      key: "{{ amanda_client_restore_pub.content | b64decode }}"
      key_options: "from=\"{{ local_server_ip }}\",{{ local_std_ssh_key_opts }},command=\"{{ hostvars[item]['amandad_path'] }} -auth=ssh amindexd amidxtaped\"" # N.B. these are the key options relating to the amanda backup server
     delegate_to: "{{ item }}"
     loop: "{{ groups['amanda_server'] }}"
     become: true

- hosts: amanda_server
  name: 'PLAY amanda_client_restore server slurp client pub key'
  gather_facts: false
  tasks:
   - name: 'TASK slurp the ssh_host_local_known_hosts_key_type_key.pub'
     ansible.builtin.slurp:
      src: "/etc/ssh/ssh_host_{{ local_known_hosts_key_type }}_key.pub"
     register: client_restore_host_pub
     become: true

- hosts: amanda_server
  name: 'PLAY amanda_client_restore server manipulate client pub key'
  gather_facts: false
  tasks:
   - name: 'TASK Split and assign the content of ssh_host_local_known_hosts_key_type_key.pub'
     ansible.builtin.set_fact:
      client_restore_host_pub2: "{{ (client_restore_host_pub.content | b64decode).split() }}"

- hosts: amanda_server
  name: 'PLAY amanda_client_restore server debug client pub keys'
  gather_facts: false
  tasks:
   - name: 'TASK debug - print the client target restore host pub keys'
     ansible.builtin.debug:
      msg: "{{ client_restore_host_pub2 }}" # this is a list and we don't want the 3rd item to be used

- hosts: amanda_client_restore
  name: 'PLAY amanda_client_restore touch known_hosts'
  gather_facts: false
  tasks:
   - name: 'TASK touch /root/.ssh/known_hosts'
     ansible.builtin.file:
      state: touch
      path: "/root/.ssh/known_hosts" # amrecover uses root
      modification_time: preserve
      access_time: preserve
      owner: root
      group: root
      mode: '0644'
     become: true
     when: local_update_server_known_hosts | bool

- hosts: amanda_client_restore
  name: 'PLAY amanda_client_restore update known_hosts'
  gather_facts: false
  tasks:
   - name: 'TASK Update roots ssh known_hosts file on client restore hosts (i)'
     ansible.builtin.known_hosts:
      path: "/root/.ssh/known_hosts" # amrecover uses root
      name: "{{ item }}"
      key: "{{ item }} {{ hostvars[item].client_restore_host_pub2[0] }} {{ hostvars[item].client_restore_host_pub2[1] }}" # dns name line
      state: present
      hash_host: true
     loop: "{{ groups['amanda_server'] }}"
     become: true
     when: local_update_server_known_hosts | bool

   - name: 'TASK Update roots ssh known_hosts file on client restore hosts (ii)'
     ansible.builtin.known_hosts:
      path: "/root/.ssh/known_hosts" # amrecover uses root
      name: "{{ hostvars[item].ansible_default_ipv4.address }}"
      key: "{{ hostvars[item].ansible_default_ipv4.address }} {{ hostvars[item].client_restore_host_pub2[0] }} {{ hostvars[item].client_restore_host_pub2[1] }}" # ip line
      state: present
      hash_host: true
     loop: "{{ groups['amanda_server'] }}"
     become: true
     when: local_update_server_known_hosts | bool

...
